#!/usr/bin/env bash

TYPE="all"

createSession(){
    local SESSION=$1
    local WORKDIR=$2
    local NAME=$3

    local hasSession=''
    tmux has -t=$SESSION > /dev/null 2>&1
    if [[ $? -eq 1 ]]; then
        tmux new -d -c $WORKDIR -s $SESSION -n $NAME
    fi
}

createWindow(){
    local SESSION=$1
    local WORKDIR=$2
    local -n NAMES=$3

    for NAME in ${NAMES[@]:1}; do
        tmux lsw -t $SESSION | grep $NAME > /dev/null 2>&1
        if [[ $? -eq 1 ]]; then
            tmux neww -d -c $WORKDIR -t $SESSION -n $NAME
        fi
    done
}

if [[ $# -gt 0 ]]; then
    while [[ $# -gt 0 ]]; do
        case $1 in
            -c)
                # load from config
                ;;
            -w)
                shift
                WORKDIR=$1
                shift
                ;;
            -s)
                shift
                SESSION=$1
                shift
                ;;
            -n)
                shift
                WORKSPACES=($1)
                shift
                ;;
            -h)
                # usage
                ;;
            -k)
                # kill sessions
                ;;
            -*)
                echo "Invalid option: $1"
                exit 1
                ;;
            *)
                echo $1
                if [[ $1 == "session" || "window" || "all" ]]; then
                    TYPE=$1
                elif [[ $1 == "window" ]]; then
                    TYPE=$1
                elif [[ $1 == "all" ]]; then
                    TYPE=$1
                else
                    echo "Invalid input"
                    exit 1
                fi
                shift
                ;;
        esac
    done
else
    echo "Missing Arguments"
    exit 1
fi

if [[ $TYPE == "all" ]]; then
    createSession $SESSION $WORKDIR ${WORKSPACES[@]}
    createWindow $SESSION $WORKDIR WORKSPACES
elif [[ $TYPE == "session" ]]; then
    createSession $SESSION $WORKDIR ${WORKSPACES[@]}
elif [[ $TYPE == "window" ]]; then
    createWindow $SESSION $WORKDIR WORKSPACES
fi
